pwd
	lists present working directory

ls
	directory listing

cd
	change directory

mkdir [directory_name]
	create a new directory with name directory_name

touch [file.extension]	
	creates a file with name file.extension

GIT STUFF

git init
	creates a new Git repository

git status
	tells you the status of your working directory
	Compares the difference between working directory and staging area and difference between staging area and repository

.gitignore
	tells git to completely ignore a a certain file (i.e. not to track the file); place the file in the folder .gitignore

git add [file]
	tells git to start tracking specific files or folders

git commit
	commits changes to the repository
	need to add everytime before a commit
	Commits:
	- working directory: folder where you are saving your files you are working with
	- staging area: where the files are when you do a git add
	- repository: after a git commit, changes saved in the repository

git log
	shows us all the commits that were made

git log --oneline
	shows us all commits in one line (in reverse chronological order)
	displays a hash value (7 characters) and the comment for each commit

messages in git
	present tense
	why is this necessary?
	50/72 rule - message description between 50 and 72 characters

git diff <old> <new>
	shows us what has changed between any 2 commits
	replace <old> and <new> by hash values referring to two commits

git diff
	shows us what has changed between our working directory and staging area (not just what files has been changes but also exactly what has been changed int the files)

git add -p
	patch mode - let selectively stage the change

git reset --hard
	resets your working directory to what you have in the repository (Be careful - may lose your local updates)

git checkout <branch/commit_hash/etc>
	HEAD is a labell for the commit we are crrently at
	switches to that branch/commit/etc
	git checkout [hash of specific commit]
		resets your working directory to what you had after that specific commit specified by the hash

	git checkout master
		sets your working directory to get back to the actual time

git revert <commit_hash/HEAD>
	reverses that commit by making another opposite commit
	git revert HEAD reverts the last commit

Branches - parallel universes where we can work on different things in isolation, e.g. working on a new feature, work on a new branch, once it's tested and stable can merge with master

git branch 
	gives us a list of all branches in the repository

git branch <branch_name>
	creates a new branch